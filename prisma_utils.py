import os
import csv
import requests

# Path to key file to configure API client
KEY_FILE = os.environ.get('PRISMA_KEY_FILE')

# SaaS Tenant API Key - required unless CSPM_TOKEN and CWP_TOKEN are already seeded or KEY_FILE is set
KEY_ID = os.environ.get('KEY_ID')
SECRET_KEY = os.environ.get('SECRET_KEY')


# CSPM GLOBALS
CSPM_BASE_URL = os.environ.get('CSPM_BASE_URL')
CSPM_TOKEN = os.environ.get('CSPM_TOKEN')


# CWP GLOBALS
CWP_BASE_URL = os.environ.get('CWP_BASE_URL')
CWP_TOKEN = os.environ.get('CWP_TOKEN')

# Get values from API key file and set KEY_ID and SECRET_KEY
# Requires: path_to_key_file
def configure_client(key_file):
    global KEY_ID
    global SECRET_KEY
    # parse CSV using default format as generated by Prisma Console
    keys = []
    values = []
    # make a map/dict out of K,V-style CSV file
    with open(key_file) as f:
        reader = csv.reader(f)
        for row in reader:
            keys.append(row[0])
            values.append(row[1])
            
    kv = dict(zip(keys, values))

    KEY_ID = kv.get('Access Key ID')
    SECRET_KEY = kv.get('Secret Key')

# Log into CSPM (includes Code Security)
# Requires: API SECRET KEY and KEY ID. 
# Function retrieves short-lived JWT and sets value of CSPM_TOKEN
def login_cspm():
    global CSPM_TOKEN

    if not KEY_ID or not SECRET_KEY:
        configure_client(KEY_FILE)

    payload = {"username": KEY_ID, "password": SECRET_KEY}
    headers = {"content-type": "application/json; charset=UTF-8"}

    response = requests.request("POST", CSPM_BASE_URL+"/login", json=payload, headers=headers)
    
    if response.status_code == 200:
        print("Login succesfull!")
        CSPM_TOKEN = response.json().get("token")
    elif response.status_code == 401:
        configure_client(KEY_FILE)
        login_cwp()
    else:
        print("Login Error: ", response, response.text)
        exit


# make API calls to CSPM
def cspm_api(endpoint, request_type, querystring): 
    if not CSPM_TOKEN:
        login_cspm()

    headers = {"x-redlock-auth": CSPM_TOKEN}

    response = requests.request(request_type, CSPM_BASE_URL+endpoint, headers=headers, params=querystring)
    print("RESPONSE from %s: " % (endpoint), response, response.text, "\n")

    return response


# Log into CWP (Compute)
# Requires: API SECRET KEY and KEY ID - input username (as ID) and password (as Secret) for self-hosted tenants 
# Function retrieves short-lived JWT and sets value of CWP_TOKEN
def login_cwp():
    global CWP_TOKEN

    if not KEY_ID or not SECRET_KEY:
        configure_client(KEY_FILE)

    payload = {"username": KEY_ID, "password": SECRET_KEY}
    headers = {"content-type": "application/json; charset=UTF-8"}

    response = requests.request("POST", CWP_BASE_URL+"/authenticate", json=payload, headers=headers, verify=False)
    
    if response.status_code == 200:
        print("Login succesfull!")
        CWP_TOKEN = response.json().get("token")
    elif response.status_code == 401:
        configure_client(KEY_FILE)
        login_cwp()
    else:
        print("Login Error: ", response, response.text)
        exit


# make API calls to CWP (Compute)
def cwp_api(endpoint, request_type, querystring):
    if not CWP_TOKEN:
        login_cwp()

    headers = {"Authorization": "Bearer " + CWP_TOKEN}
    
    response = requests.request(request_type, CWP_BASE_URL+endpoint, headers=headers, params=querystring, verify=False)
    print("RESPONSE from %s: " % (endpoint), response, response.text, "\n")

    return response



